{"ast":null,"code":"import _classCallCheck from \"/Users/hacknew/version-control/react/react10Projects/routingapp2/cliente/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/hacknew/version-control/react/react10Projects/routingapp2/cliente/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport history from '../history';\nimport auth0 from 'auth0-js';\nimport { AUTH_CONFIG } from './auth0-variables';\n\nvar Auth =\n/*#__PURE__*/\nfunction () {\n  function Auth() {\n    _classCallCheck(this, Auth);\n\n    this.auth0 = new auth0.WebAuth({\n      domain: AUTH_CONFIG.domain,\n      clientID: AUTH_CONFIG.clientId,\n      redirectUri: AUTH_CONFIG.callbackUrl,\n      responseType: 'token id_token',\n      scope: 'openid'\n    });\n    this.login = this.login.bind(this);\n    this.logout = this.logout.bind(this);\n    this.handleAuthentication = this.handleAuthentication.bind(this);\n    this.isAuthenticated = this.isAuthenticated.bind(this);\n    this.getAccessToken = this.getAccessToken.bind(this);\n    this.getIdToken = this.getIdToken.bind(this);\n    this.renewSession = this.renewSession.bind(this);\n  }\n\n  _createClass(Auth, [{\n    key: \"login\",\n    value: function login() {\n      this.auth0.authorize();\n    }\n  }, {\n    key: \"handleAuthentication\",\n    value: function handleAuthentication() {\n      var _this = this;\n\n      this.auth0.parseHash(function (err, authResult) {\n        if (authResult && authResult.accessToken && authResult.idToken) {\n          _this.setSession(authResult);\n        } else if (err) {\n          history.replace('/home');\n          console.log(err);\n          alert(\"Error: \".concat(err.error, \". Check the console for further details.\"));\n        }\n      });\n    }\n  }, {\n    key: \"getAccessToken\",\n    value: function getAccessToken() {\n      return this.accessToken;\n    }\n  }, {\n    key: \"getIdToken\",\n    value: function getIdToken() {\n      var accessToken = localStorage.getItem('access_token');\n\n      if (!accessToken) {\n        return new Error('Hubo un error al general el token');\n      }\n\n      return accessToken; //return this.idToken;\n    }\n  }, {\n    key: \"setSession\",\n    value: function setSession(authResult) {\n      // Set isLoggedIn flag in localStorage\n      localStorage.setItem('isLoggedIn', 'true'); // Set the time that the access token will expire at\n\n      var expiresAt = authResult.expiresIn * 1000 + new Date().getTime();\n      this.accessToken = authResult.accessToken;\n      this.idToken = authResult.idToken;\n      this.expiresAt = expiresAt; // navigate to the home route\n\n      history.replace('/home');\n    }\n  }, {\n    key: \"renewSession\",\n    value: function renewSession() {\n      var _this2 = this;\n\n      this.auth0.checkSession({}, function (err, authResult) {\n        if (authResult && authResult.accessToken && authResult.idToken) {\n          _this2.setSession(authResult);\n        } else if (err) {\n          _this2.logout();\n\n          console.log(err);\n          alert(\"Could not get a new token (\".concat(err.error, \": \").concat(err.error_description, \").\"));\n        }\n      });\n    }\n  }, {\n    key: \"logout\",\n    value: function logout() {\n      // Remove tokens and expiry time\n      this.accessToken = null;\n      this.idToken = null;\n      this.expiresAt = 0; // Remove isLoggedIn flag from localStorage\n\n      localStorage.removeItem('isLoggedIn'); // navigate to the home route\n\n      history.replace('/home');\n    }\n  }, {\n    key: \"isAuthenticated\",\n    value: function isAuthenticated() {\n      // Check whether the current time is past the\n      // access token's expiry time\n      var expiresAt = this.expiresAt;\n      return new Date().getTime() < expiresAt;\n    }\n  }]);\n\n  return Auth;\n}();\n\nexport { Auth as default };","map":{"version":3,"sources":["/Users/hacknew/version-control/react/react10Projects/routingapp2/cliente/src/Auth/Auth.js"],"names":["history","auth0","AUTH_CONFIG","Auth","WebAuth","domain","clientID","clientId","redirectUri","callbackUrl","responseType","scope","login","bind","logout","handleAuthentication","isAuthenticated","getAccessToken","getIdToken","renewSession","authorize","parseHash","err","authResult","accessToken","idToken","setSession","replace","console","log","alert","error","localStorage","getItem","Error","setItem","expiresAt","expiresIn","Date","getTime","checkSession","error_description","removeItem"],"mappings":"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","sourcesContent":["import history from '../history';\nimport auth0 from 'auth0-js';\nimport { AUTH_CONFIG } from './auth0-variables';\n\nexport default class Auth {\n  accessToken;\n  idToken;\n  expiresAt;\n\n  auth0 = new auth0.WebAuth({\n    domain: AUTH_CONFIG.domain,\n    clientID: AUTH_CONFIG.clientId,\n    redirectUri: AUTH_CONFIG.callbackUrl,\n    responseType: 'token id_token',\n    scope: 'openid'\n  });\n\n  constructor() {\n    this.login = this.login.bind(this);\n    this.logout = this.logout.bind(this);\n    this.handleAuthentication = this.handleAuthentication.bind(this);\n    this.isAuthenticated = this.isAuthenticated.bind(this);\n    this.getAccessToken = this.getAccessToken.bind(this);\n    this.getIdToken = this.getIdToken.bind(this);\n    this.renewSession = this.renewSession.bind(this);\n  }\n\n  login() {\n    this.auth0.authorize();\n  }\n\n  handleAuthentication() {\n    this.auth0.parseHash((err, authResult) => {\n      if (authResult && authResult.accessToken && authResult.idToken) {\n        this.setSession(authResult);\n      } else if (err) {\n        history.replace('/home');\n        console.log(err);\n        alert(`Error: ${err.error}. Check the console for further details.`);\n      }\n    });\n  }\n\n  getAccessToken() {\n    return this.accessToken;\n  }\n\n  getIdToken() {\n    const accessToken = localStorage.getItem('access_token');\n\n    if(!accessToken) {\n      return new Error('Hubo un error al general el token');\n    }\n\n    return accessToken;\n    //return this.idToken;\n  }\n\n  setSession(authResult) {\n    // Set isLoggedIn flag in localStorage\n    localStorage.setItem('isLoggedIn', 'true');\n\n    // Set the time that the access token will expire at\n    let expiresAt = (authResult.expiresIn * 1000) + new Date().getTime();\n    this.accessToken = authResult.accessToken;\n    this.idToken = authResult.idToken;\n    this.expiresAt = expiresAt;\n\n    // navigate to the home route\n    history.replace('/home');\n  }\n\n  renewSession() {\n    this.auth0.checkSession({}, (err, authResult) => {\n       if (authResult && authResult.accessToken && authResult.idToken) {\n         this.setSession(authResult);\n       } else if (err) {\n         this.logout();\n         console.log(err);\n         alert(`Could not get a new token (${err.error}: ${err.error_description}).`);\n       }\n    });\n  }\n\n  logout() {\n    // Remove tokens and expiry time\n    this.accessToken = null;\n    this.idToken = null;\n    this.expiresAt = 0;\n\n    // Remove isLoggedIn flag from localStorage\n    localStorage.removeItem('isLoggedIn');\n\n    // navigate to the home route\n    history.replace('/home');\n  }\n\n  isAuthenticated() {\n    // Check whether the current time is past the\n    // access token's expiry time\n    let expiresAt = this.expiresAt;\n    return new Date().getTime() < expiresAt;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}